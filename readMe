all contexts from head first of java design patterns,conclude 13 major patterns and 9 patterns form appendix

1 strategy:策略模式 --定义了算法族(一类行为的不同表现形式)，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。
也就是 将行经常变动的行为独立抽象出来，作为属性放置于类中，并设置set方法。这样可以在运行时指定对象的行为。

2 observer:观察者模式--定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，他的所有依赖者都会收到通知并自动更新。

3 decorator:装饰者模式--动态的将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。

4 factory:工厂模式
4.1、简单工厂模式：将类的实例化封装到一个具体的类中(可以是这个类的一个静态方法)。 很多对象可以引用，当以后改变时，只需修改一次。但是扩展时，必须修改代码。
4.2、工厂方法模式：定义了一个创建对象的接口，但由子类决定要是实例化的类是哪一个，工厂方法让类把实例化推迟到子类。
这个 “决定”并不是指模式允许子类本身在运行时做决定，而是指在编写创建者时，不需要知道实际创建的产品是哪一个，选择使用了那个子类就决定了实际创建的对象。
4.3、抽象工厂:提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类抽象工厂允许客户使用抽象的接口来创建一组相关的产品，而不需要知道实际产出的具体产品是什么。
